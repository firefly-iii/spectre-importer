{% extends "./layout/default" %}
{% block content %}
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                &nbsp;
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <h1>{{ mainTitle }}</h1>
                <h2>{{ subTitle }}</h2>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <p class="lead">Welcome!</p>
                <p>
                    Welcome to the start of the Firefly III Spectre importer. Use the form below to upload a <strong>optional</strong>
                    configuration file. Or just press "Upload" to continue. Read the
                    <a target="_blank" href="https://firefly-iii.gitbook.io/firefly-iii-spectre-importer/importing-data/upload">documentation</a> for more information.
                </p>
                <hr/>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <form method="post" action="{{ route('import.upload') }}" accept-charset="UTF-8" id="store" enctype="multipart/form-data">
                    <input type="hidden" name="_token" value="{{ csrf_token() }}"/>

                    <div class="form-group row">
                        <label for="config_file" class="col-sm-4 col-form-label"><strong>Optional</strong> configuration file</label>
                        <div class="col-sm-8">
                            <input type="file" class="form-control" id="config_file" name="config_file" placeholder="Configuration file"/>
                            {% if errors.has('config_file') %}
                                <span class="text-danger">{{ errors.first('config_file') }}</span>
                            {% endif %}
                        </div>
                    </div>

                    {% if list|length > 0 %}
                        <div class="form-group row">
                            <label for="config_file" class="col-sm-4 col-form-label">Pre-made configuration file</label>
                            <div class="col-sm-8">
                                <select class="form-control" name="existing_config" id="existing_config">
                                    <option value="" label="Upload or manual config">Upload or manual config</option>
                                    {% for file in list %}
                                        <option value="{{ file }}" label="{{ file }}">{{ file }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        </div>
                    {% endif %}

                    <div class="row">
                        <div class="col-lg-6">
                            <!-- go back to start -->
                            <a href="{{ route('back.start') }}" class="btn btn-secondary">&larr; Go back to index</a>
                        </div>
                        <div class="col-lg-6">
                            <!-- continue -->
                            <button type="submit" class="float-right btn btn-primary">Upload &rarr;</button>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>
{% endblock %}
{% block scripts %}
<script type="application/javascript">
    $(function () {
        "use strict";
        if(readCookie('selected-json')) {
            $('#existing_config').val(readCookie('selected-json'));
        }
        // catch the before submit and place a cookie.
        $('#store').submit(function() {
            var selected = $('#existing_config').val();
            if('' !== selected) {
                createCookie('selected-json', selected, 365);
            }
            return true;

        });

    });

    // cookie methods
    function createCookie(name, value, days) {
        "use strict";
        var expires;

        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toGMTString();
        } else {
            expires = "";
        }
        document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=/";
    }

    function readCookie(name) {
        "use strict";
        var nameEQ = encodeURIComponent(name) + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1, c.length);
            }
            if (c.indexOf(nameEQ) === 0) {
                return decodeURIComponent(c.substring(nameEQ.length, c.length));
            }
        }
        return null;
    }
</script>
{% endblock %}
